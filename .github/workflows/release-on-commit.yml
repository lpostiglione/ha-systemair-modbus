name: Release on commit message

on:
  push:

permissions:
  contents: write

jobs:
  release:
    # Only run on the repository's default branch
    if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
    runs-on: ubuntu-latest
    steps:
      - name: Extract version from commit message
        id: version
        shell: bash
        run: |
          set -euo pipefail
          msg="${{ github.event.head_commit.message }}"
          echo "Commit message: $msg"
          version=$(perl -ne 'if (m{Release\s+([0-9]+\.[0-9]+\.?[0-9]*)}i){print $1; exit 0}' <<< "$msg")
          if [ -n "${version}" ]; then
            echo "Found version: ${version}"
            echo "version=${version}" >> "$GITHUB_OUTPUT"
          else
            echo "No release version found in commit message; skipping."
            echo "skip=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Stop if no version match
        if: steps.version.outputs.skip == 'true'
        run: echo "No matching release version in commit message; nothing to do."

      - name: Check out repository
        if: steps.version.outputs.skip != 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create release branch
        if: steps.version.outputs.skip != 'true'
        id: branch
        env:
          VERSION: ${{ steps.version.outputs.version }}
        shell: bash
        run: |
          set -euo pipefail
          BRANCH="release/${VERSION}"
          echo "Creating branch ${BRANCH}"
          echo "branch=${BRANCH}" >> "$GITHUB_OUTPUT"
          git checkout -b "${BRANCH}"

      - name: Update manifest.json version
        if: steps.version.outputs.skip != 'true'
        env:
          VERSION: ${{ steps.version.outputs.version }}
        shell: bash
        run: |
          set -euo pipefail
          if jq --arg v "${VERSION}" '.version = $v' manifest.json > manifest.json.tmp; then
            mv manifest.json.tmp manifest.json
          else
            echo "Failed to update manifest.json" >&2
            exit 1
          fi

      - name: Commit changes and push branch
        if: steps.version.outputs.skip != 'true'
        env:
          VERSION: ${{ steps.version.outputs.version }}
        shell: bash
        run: |
          set -euo pipefail
          if git diff --quiet -- manifest.json; then
            echo "No changes to commit (manifest.json already at ${VERSION})"
          else
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git config user.name "github-actions[bot]"
            git add manifest.json
            git commit -m "chore(release): set manifest.json version to ${VERSION} [skip ci]"
          fi
          CURRENT_BRANCH=$(git branch --show-current)
          git push --set-upstream origin "${CURRENT_BRANCH}"

      - name: Create and push tag
        if: steps.version.outputs.skip != 'true'
        env:
          VERSION: ${{ steps.version.outputs.version }}
        shell: bash
        run: |
          set -euo pipefail
          # Create annotated tag on current HEAD of release branch
          if git rev-parse "${VERSION}" >/dev/null 2>&1; then
            echo "Tag ${VERSION} already exists locally."
          else
            git tag -a "${VERSION}" -m "Release ${VERSION}"
          fi
          git push origin "refs/tags/${VERSION}"

      - name: Create GitHub Release
        if: steps.version.outputs.skip != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          generate_release_notes: true

      - name: Delete remote release branch
        if: steps.version.outputs.skip != 'true'
        env:
          BRANCH: ${{ steps.branch.outputs.branch }}
        shell: bash
        run: |
          set -euo pipefail
          git push origin --delete "${BRANCH}" || echo "Branch ${BRANCH} already deleted or not found."